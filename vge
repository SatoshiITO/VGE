#!/usr/bin/env python
"""

Virtual Grid Engine (VGE) for running bioinformatics pipelines on MPI-base supercomputers

version 1.0

"""

import os, argparse
from VGE.vge_conf import *
from VGE.get_vge_conf import get_vge_conf

#
#
#
current_dir=os.getcwd() 
home_dir = os.environ["HOME"] # $HOME
#
#
#
default_output_dirname = "vge_output"
default_root_dir = current_dir
default_output_dir = default_root_dir  + "/" + default_output_dirname
 
#
# read and parse VGE config file
#
flag_vge_conf=False
default_vge_conf_dir = current_dir
default_vge_conf = default_vge_conf_dir + "/vge.cfg"
if os.path.isfile(default_vge_conf):
    flag_vge_conf=True
elif "VGE_CONF" in os.environ:
    default_vge_conf_dir = os.environ["VGE_CONF"] 
    default_vge_conf = default_vge_conf_dir + "/vge.cfg"
    if os.path.isfile(default_vge_conf):
       flag_vge_conf=True
vge_conf.read(default_vge_conf)
vge_conf_check()
verbose = 0
verbose = int(get_vge_conf("vge","verbose",verbose))

# parse command-line arguments
#
parser = argparse.ArgumentParser(description='Virtual Grid Engine (VGE) for GenomonPipeline version.20160930')
parser = argparse.ArgumentParser(epilog='Note: VGE must run under MPI and Python mpi4py. VGE should keep running in the background before GenomonPipeline starts to run (use an ampersand symbol & in VGE execution command) in the case that both VGE and GenomonPipeline are launched from a script or the same terminal. ex. "mpiexec -n 48 python vge &".  In order to stop VGE, use connect.py with --stop as "connect.py --stop".  VGE can read its configuration file (vge.cfg) either in the path where VGE is launched or in the directory defined in an environment variable $VGE_CONF (the former path has a first priority).')
#
parser.add_argument('--loadbalancer', action='store', nargs='?', const='time', default='off', type=str, \
                     choices=['time','count','off'], metavar=None, \
                     help = 'set a load balancer mode for MPI workers. <value> "time": balanced by work time (default). <value> "count": balanced by job count. \
                             "--loadbalancer" is the same action for "--loadbalancer time". <value> "off" explicitly turns off the balancer.')
parser.add_argument('--nowrite_jobscript', action='store_true', default=False, \
                     help = 'do not write any job script or output file.')
parser.add_argument('--nowrite_vgecsv', action='store_true', default=False, \
                     help = 'do not write CSV-formatted files in which job status results are listed.')
parser.add_argument('-o','--output_dir', action='store', nargs='?', const=default_output_dir, default=default_output_dir, type=str, choices=None, metavar=None, \
                     help = 'set a directory where script,output and CSV result files are stored. [default:%s]' %default_output_dir)
parser.add_argument('--clean', action='store_true', default=False, help = 'clean previous VGE process(es)')
parser.add_argument('--check_mpi_probe', action='store_true', default=False, help = "check MPI probe")
#
cl_args = parser.parse_args()

#
#
#
from mpi4py import MPI
import multiprocessing
import sys,signal
import datetime, commands
import time  
#
from VGE.genomon_jobcontroll import *
from VGE.mpi_jobcontroll_master import *
from VGE.mpi_jobcontroll_worker import *

#
# MPI init
#
comm = MPI.COMM_WORLD
nproc = comm.Get_size()
myrank = comm.Get_rank()
proc_name = MPI.Get_processor_name()

#
#
#
master_rank = 0                     # master(vge runs) : 0
genomon_pipeline_rank = master_rank # GenomonPiepline  : 0, same as the master rank, so far.
worker_rank_ini=master_rank+1       # workers          : 1 to (nproc-1)
worker_rank_fin=nproc-1             # 

#
# set verbose level
#
from logging import getLogger,StreamHandler,basicConfig,DEBUG,INFO,WARNING,ERROR,CRITICAL
logger=getLogger(__name__)
logger.setLevel(INFO)
if verbose == 0:
   logger.setLevel(CRITICAL)
elif verbose == 1 or verbose ==2:
   logger.setLevel(INFO)
elif verbose == 3:
   logger.setLevel(DEBUG)
basicConfig(format='%(asctime)s:%(levelname)s:%(message)s')

#
if myrank == master_rank:
   logger.info("VGE: ---------------------------------------------------")
   logger.info("VGE: VGE has been launched.")
   logger.info("VGE: ---------------------------------------------------")
#
# check
#
if nproc == 1:
   logger.error("VGE: error!!!!")
   logger.error("VGE: MPI nproc must be more than 2. (nproc=%i)" %nproc)
   logger.error("VGE: VGE has been aborted.")
   logger.error("")
   exit()

# 
# get process id for all nodes
#
vgepid_list =[]
mypid = os.getpid()
vgepid_list = comm.gather(mypid, root=master_rank)

#
# clean vge process(es) still running to avoid multiple runs
#
if cl_args.clean:
 logger.info("VGE: clean process....")
 if myrank == master_rank:
   myname=(os.path.basename(__file__)).split(".")[0]
   process_list =[]
   process_list=commands.getoutput(  \
        "ps -ef|grep '%s'|grep -v grep|grep -v vi|grep -v mpiexec |grep -v mpirun|grep -v mpiexec.hydra" %myname)
        # except for grep /vi / mpiexec/ mpirun/ mpihydra
   lists=process_list.split("\n")
   #print lists
   kill_pid_list = []
   if len(lists) > 0:
       for line in lists:
           pid = line.split()
           #print pid
           if not int(pid[1]) in vgepid_list:
                kill_pid_list.append(pid[1])
       # kill process(es)
       if len(kill_pid_list):
           output = "clean vge process..."
           for pid in kill_pid_list:
              os.kill(int(pid), signal.SIGTERM) 
              output += "."
           logger.debug(output)

#
# VGE environment 
#
vge_env={}
if myrank == master_rank:
    home_dir = os.environ["HOME"] # $HOME
    vge_run_dir=os.getcwd() # dir where VGE is running
    # 
    #vge_output_dir = vge_run_dir + "/vge_results/" + (str(datetime.datetime.now().strftime("%Y%m%d_%H%M_%S%f")))[:-5]
    #vge_output_dir = home_dir + "/private/output_vge/" + (str(datetime.datetime.now().strftime("%Y%m%d_%H%M_%S%f")))[:-5]
 
    #vge_output_dir = vge_run_dir 
    vge_output_dir = cl_args.output_dir

    #vge_script_dir = vge_output_dir + "/script"
    vge_script_dir = cl_args.output_dir
    #
    vge_env["home_dir"] = home_dir
    vge_env["vge_run_dir"] = vge_run_dir
   
    vge_env["vge_script_dir"] = vge_script_dir
    vge_env["vge csvdir_dir"] = vge_output_dir

    logger.info("VGE: Environment:")
    logger.info("VGE: $HOME:(%s) " %home_dir)
    logger.info("VGE: vge running dir:(%s) " %vge_run_dir)
    logger.info("VGE: verbose level=%i" %verbose)

    if cl_args.nowrite_jobscript:
        logger.info("VGE: job script/output files will NOT be written. [nowrite_jobscript=True]")
    else:
        logger.info("VGE: job script/output files stored in [%s]. " %vge_script_dir)

    if cl_args.nowrite_vgecsv:
        logger.info("VGE: VGE result files will not be saved [nowrite_vgecsv=True].")
    else:
        logger.info("VGE: VGE result files will be saved in [%s]. " %vge_output_dir)

    #
    # check vge conf
    #
    vge_env["vge_conf"] = default_vge_conf
    vge_env["flag_vge_conf"] = flag_vge_conf
    if flag_vge_conf:
        logger.info("VGE: vge.cfg is found in [%s]." %default_vge_conf)

    #
    # make dirs
    #
    logger.info("VGE: create output/job script dirs....")
    
    if os.path.exists(vge_output_dir):
       logger.info("VGE: dir [%s] already exists." %vge_output_dir)
    else:
       os.makedirs(vge_output_dir)
    #if os.path.exists(vge_script_dir):
    #   logger.info("VGE: dir [%s] already exists." %vge_output_dir)
    #else:
    #   os.makedirs(vge_script_dir)

comm.barrier()
vge_env = comm.bcast(vge_env, root=0)
#
#
mpi_master_args={}
mpi_worker_args={}
job_args={}
mpi_master_args=vge_env
mpi_worker_args=vge_env
job_args=vge_env

#
# main
#
if __name__ == '__main__':

    if myrank == master_rank:
       total_elapsed_time = time.time()

    #
    # MPI master node
    #
    if myrank == master_rank:

        elapsed_time = time.time()
        
        logger.info("VGE: MPI master rank [%i] --> processor name[%s]" %(myrank, proc_name))

        #
        # create shared dicts to communicate between VGE-mpi and VGE-genomon job controllers
        #
        manager=multiprocessing.Manager()
        total_joblist=manager.dict()
        command_list=manager.dict()
        new_joblist=manager.dict()
        task_check=manager.dict()

        #
        # make VGE result filenames
        #
        mpi_master_args["total_joblist_filename"] = vge_output_dir + "/vge_joblist.csv"
        mpi_master_args["vge_worker_result"]      = vge_output_dir + "/vge_worker_result.csv"
        mpi_master_args["vge_commands"]           = vge_output_dir + "/vge_jobcommands.csv"

        #
        #make a multiprocessing process
        #
        genomon_jobcontroll_process = multiprocessing.Process(target=genomon_jobcontroll, \
                 args=(cl_args,job_args, total_joblist, new_joblist, task_check, command_list,))

        #
        # start GenomonPipeline job controller 
        #
        genomon_jobcontroll_process.start()

        #
        # start mpi master process
        #
        mpi_jobcontroll_master(cl_args, mpi_master_args, comm, total_joblist,new_joblist,task_check, command_list)

        #
        # stop genomon_jobcontroll process
        #
        genomon_jobcontroll_process.join()

        elapsed_time = time.time() - elapsed_time
        logger.info("VGE: MPI master: elapsed time: %12.3f sec" %elapsed_time)
 
        #

    #
    # MPI worker nodes
    #
    elif myrank != master_rank and myrank != genomon_pipeline_rank:
        # execute worker processes
        logger.info("VGE: MPI worker rank [%i] --> processor name [%s]" %(myrank, proc_name))
        mpi_jobcontroll_worker(cl_args, mpi_worker_args, comm)
    #
    # rest of MPI workers
    #
    else:
        pass

    comm.barrier()
    if myrank == master_rank:
       total_elapsed_time = time.time() - total_elapsed_time
       logger.info("VGE: total elapsed time: %12.3f sec" %total_elapsed_time)
       logger.info("VGE: ---------------------------------------------------")
       logger.info("VGE: VGE completed normally.")
       logger.info("VGE: ---------------------------------------------------")

       manager.shutdown()
       import time
       time.sleep(2)
       del manager


